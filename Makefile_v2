# AxiomaCore-328 Makefile v2 - Fase 2 Complete
# Sistema de build para núcleo AVR completo

# Directorios
CORE_DIR = core
MEMORY_DIR = memory
INT_DIR = axioma_interrupt
TB_DIR = testbench
SYN_DIR = synthesis
DOCS_DIR = docs

# Archivos fuente Fase 2
SOURCES_V2 = $(CORE_DIR)/axioma_registers/axioma_registers.v \
             $(CORE_DIR)/axioma_alu/axioma_alu.v \
             $(CORE_DIR)/axioma_decoder/axioma_decoder_v2.v \
             $(MEMORY_DIR)/axioma_flash_ctrl/axioma_flash_ctrl.v \
             $(MEMORY_DIR)/axioma_sram_ctrl/axioma_sram_ctrl.v \
             $(INT_DIR)/axioma_interrupt.v \
             $(CORE_DIR)/axioma_cpu/axioma_cpu_v2.v

# Testbenches
TESTBENCH_V1 = $(TB_DIR)/axioma_cpu_tb.v
TESTBENCH_V2 = $(TB_DIR)/axioma_cpu_v2_tb.v

# Herramientas
IVERILOG = iverilog
VVP = vvp
GTKWAVE = gtkwave
YOSYS = yosys

# Targets principales
.PHONY: all clean test_v1 test_v2 cpu_v1 cpu_v2 synthesize_v2 view_waves help phase1 phase2

all: phase2

help:
	@echo "AxiomaCore-328 Build System v2"
	@echo "=============================="
	@echo "FASE 1 (Básico):"
	@echo "  make phase1       - Núcleo básico Fase 1"
	@echo "  make cpu_v1       - Compilar CPU v1"
	@echo "  make test_v1      - Test CPU v1"
	@echo ""
	@echo "FASE 2 (Completo):"
	@echo "  make phase2       - Núcleo completo Fase 2"
	@echo "  make cpu_v2       - Compilar CPU v2"
	@echo "  make test_v2      - Test CPU v2 avanzado"
	@echo "  make test_v2_view - Test v2 + GTKWave"
	@echo ""
	@echo "SÍNTESIS:"
	@echo "  make synthesize_v2 - Síntesis Fase 2"
	@echo "  make area_report   - Reporte de área"
	@echo ""
	@echo "UTILIDADES:"
	@echo "  make clean        - Limpiar archivos"
	@echo "  make info_v2      - Info Fase 2"
	@echo "  make stats        - Estadísticas proyecto"

# ============= FASE 1 =============
phase1: cpu_v1 test_v1
	@echo "✅ AxiomaCore-328 Fase 1 completada"

cpu_v1: axioma_cpu_v1_sim
	@echo "✅ CPU v1 compilado exitosamente"

axioma_cpu_v1_sim: $(CORE_DIR)/axioma_registers/axioma_registers.v $(CORE_DIR)/axioma_alu/axioma_alu.v $(CORE_DIR)/axioma_decoder/axioma_decoder.v $(CORE_DIR)/axioma_cpu/axioma_cpu.v $(TESTBENCH_V1)
	@echo "🔨 Compilando AxiomaCore-328 v1..."
	$(IVERILOG) -o axioma_cpu_v1_sim -I$(CORE_DIR) \
		$(CORE_DIR)/axioma_registers/axioma_registers.v \
		$(CORE_DIR)/axioma_alu/axioma_alu.v \
		$(CORE_DIR)/axioma_decoder/axioma_decoder.v \
		$(CORE_DIR)/axioma_cpu/axioma_cpu.v \
		$(TESTBENCH_V1)

test_v1: axioma_cpu_v1_sim
	@echo "🧪 Ejecutando testbench v1..."
	$(VVP) axioma_cpu_v1_sim
	@echo "✅ Test v1 completado"

# ============= FASE 2 =============
phase2: cpu_v2 test_v2
	@echo "🚀 AxiomaCore-328 Fase 2 completada"

cpu_v2: axioma_cpu_v2_sim
	@echo "✅ CPU v2 (completo) compilado exitosamente"

axioma_cpu_v2_sim: $(SOURCES_V2) $(TESTBENCH_V2)
	@echo "🔨 Compilando AxiomaCore-328 v2 (Núcleo Completo)..."
	$(IVERILOG) -o axioma_cpu_v2_sim -I$(CORE_DIR) -I$(MEMORY_DIR) -I$(INT_DIR) $(SOURCES_V2) $(TESTBENCH_V2)

test_v2: axioma_cpu_v2_sim
	@echo "🧪 Ejecutando testbench avanzado v2..."
	$(VVP) axioma_cpu_v2_sim
	@echo "✅ Test avanzado v2 completado"

test_v2_view: test_v2
	@echo "🔍 Abriendo GTKWave..."
	$(GTKWAVE) axioma_cpu_v2_tb.vcd &

# ============= SÍNTESIS =============
synthesize_v2: $(SOURCES_V2)
	@echo "⚙️  Ejecutando síntesis Fase 2 con Yosys..."
	@mkdir -p $(SYN_DIR)
	$(YOSYS) -s synthesis/axioma_syn_v2.ys

$(SYN_DIR)/axioma_syn_v2.ys:
	@mkdir -p $(SYN_DIR)
	@echo "# AxiomaCore-328 v2 Synthesis Script" > $(SYN_DIR)/axioma_syn_v2.ys
	@echo "read_verilog $(SOURCES_V2)" >> $(SYN_DIR)/axioma_syn_v2.ys
	@echo "hierarchy -top axioma_cpu_v2" >> $(SYN_DIR)/axioma_syn_v2.ys
	@echo "proc; opt; fsm; opt; memory; opt" >> $(SYN_DIR)/axioma_syn_v2.ys
	@echo "techmap; opt" >> $(SYN_DIR)/axioma_syn_v2.ys
	@echo "stat -width" >> $(SYN_DIR)/axioma_syn_v2.ys
	@echo "tee -o $(SYN_DIR)/area_report.txt stat -width" >> $(SYN_DIR)/axioma_syn_v2.ys
	@echo "write_verilog $(SYN_DIR)/axioma_cpu_v2_syn.v" >> $(SYN_DIR)/axioma_syn_v2.ys

area_report: synthesize_v2
	@echo "📊 Reporte de área:"
	@cat $(SYN_DIR)/area_report.txt | grep -E "(cells|wires|cells by type)"

# ============= TESTS ESPECÍFICOS =============
test_decoder_v2: $(CORE_DIR)/axioma_decoder/axioma_decoder_v2.v
	@echo "🧪 Test individual Decodificador v2..."
	$(IVERILOG) -o test_decoder_v2 -DTEST_DECODER_V2 $(CORE_DIR)/axioma_decoder/axioma_decoder_v2.v
	$(VVP) test_decoder_v2

test_flash: $(MEMORY_DIR)/axioma_flash_ctrl/axioma_flash_ctrl.v
	@echo "🧪 Test individual Flash Controller..."
	$(IVERILOG) -o test_flash -DTEST_FLASH $(MEMORY_DIR)/axioma_flash_ctrl/axioma_flash_ctrl.v
	$(VVP) test_flash

test_sram: $(MEMORY_DIR)/axioma_sram_ctrl/axioma_sram_ctrl.v
	@echo "🧪 Test individual SRAM Controller..."
	$(IVERILOG) -o test_sram -DTEST_SRAM $(MEMORY_DIR)/axioma_sram_ctrl/axioma_sram_ctrl.v
	$(VVP) test_sram

test_interrupt: $(INT_DIR)/axioma_interrupt.v
	@echo "🧪 Test individual Interrupt Controller..."
	$(IVERILOG) -o test_interrupt -DTEST_INTERRUPT $(INT_DIR)/axioma_interrupt.v
	$(VVP) test_interrupt

# ============= INFORMACIÓN =============
info_v2:
	@echo "AxiomaCore-328 v2: Complete AVR-Compatible Microcontroller"
	@echo "=========================================================="
	@echo "Arquitectura: AVR de 8 bits - Núcleo Completo"
	@echo "Tecnología: SkyWater Sky130 PDK"
	@echo "Herramientas: 100% Open Source"
	@echo "Estado: Fase 2 - Núcleo AVR Completo"
	@echo ""
	@echo "Componentes implementados:"
	@echo "  ✅ AxiomaDecoder v2 - 40+ instrucciones AVR"
	@echo "  ✅ AxiomaRegisters - Banco de 32 registros"
	@echo "  ✅ AxiomaALU - Unidad aritmético-lógica completa"
	@echo "  ✅ AxiomaFlash - Controlador Flash 32KB"
	@echo "  ✅ AxiomaSRAM - Controlador SRAM 2KB + Stack"
	@echo "  ✅ AxiomaIRQ - Sistema de interrupciones vectorizadas"
	@echo "  ✅ AxiomaCPU v2 - Núcleo integrado completo"
	@echo ""
	@echo "Funcionalidades avanzadas:"
	@echo "  ✅ Pipeline de 2 etapas optimizado"
	@echo "  ✅ Memory mapping compatible AVR"
	@echo "  ✅ Stack automático con SP"
	@echo "  ✅ 26 vectores de interrupción"
	@echo "  ✅ Modos de direccionamiento avanzados"
	@echo "  ✅ Control de flujo completo"
	@echo "  ✅ CALL/RET/RETI implementados"
	@echo ""
	@echo "Instruction Set soportado:"
	@echo "  ✅ Arithmetic: ADD, ADC, SUB, SBC, INC, DEC"
	@echo "  ✅ Logic: AND, OR, EOR, COM, NEG"
	@echo "  ✅ Data Transfer: MOV, LDI, LD, ST, PUSH, POP"
	@echo "  ✅ Bit Operations: LSL, LSR, ROL, ROR, ASR"
	@echo "  ✅ Compare: CP, CPC, CPI"
	@echo "  ✅ Branch: BREQ, BRNE, BRCS, BRCC, BRMI, BRPL"
	@echo "  ✅ Jump/Call: RJMP, RCALL, RET, RETI"
	@echo "  ✅ Memory Access: Indirect with X/Y/Z pointers"
	@echo ""

# ============= ESTADÍSTICAS =============
stats:
	@echo "📊 Estadísticas del proyecto AxiomaCore-328:"
	@echo "Líneas de código Verilog v2:"
	@wc -l $(SOURCES_V2) | tail -1
	@echo "Líneas de testbench:"
	@wc -l $(TESTBENCH_V2)
	@echo "Archivos del proyecto:"
	@find . -name "*.v" | wc -l
	@echo "Módulos implementados:"
	@grep -r "^module " . --include="*.v" | wc -l
	@echo "Compatibilidad AVR estimada: ~30%"

# ============= LIMPIEZA =============
clean:
	@echo "🧹 Limpiando archivos generados..."
	rm -f axioma_cpu_v1_sim axioma_cpu_v2_sim
	rm -f test_decoder_v2 test_flash test_sram test_interrupt
	rm -f *.vcd
	rm -f *.out
	rm -rf $(SYN_DIR)/*.v $(SYN_DIR)/*.ys $(SYN_DIR)/*.txt
	@echo "✅ Limpieza completada"

# ============= VERIFICACIÓN HERRAMIENTAS =============
check_tools:
	@echo "🔧 Verificando herramientas para Fase 2..."
	@which $(IVERILOG) > /dev/null || echo "❌ Icarus Verilog no encontrado"
	@which $(GTKWAVE) > /dev/null || echo "❌ GTKWave no encontrado"
	@which $(YOSYS) > /dev/null || echo "⚠️  Yosys no encontrado (opcional)"
	@echo "✅ Verificación de herramientas completada"

# ============= DESARROLLO =============
dev_setup:
	@echo "🛠️  Configurando entorno de desarrollo Fase 2..."
	@mkdir -p $(SYN_DIR) $(DOCS_DIR)/phase2
	@echo "✅ Entorno configurado"

# OpenLane integration (futuro)
openlane_prep:
	@echo "🔧 Preparando para integración OpenLane..."
	@mkdir -p openlane/axioma_core_328
	@echo "PDK configurado: Sky130A"
	@echo "Diseño listo para Place & Route"